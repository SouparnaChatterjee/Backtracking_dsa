//How the Flow Works:
//Start from a cell in the grid.
//Check if the character at the current cell matches the first character of the word.
//If it matches, temporarily mark the cell as visited (board[row][col] = '#').
//Recursively check all four directions (up, down, left, right) for the next character in the word.
//If at any point the current character doesn't match, backtrack and try other paths.
//ðŸ˜Š

class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
    int rows=board.size();
    int cols=board[0].size();
    for(int i=0;i<rows;i++)   
    {
        for(int j=0;j<cols;j++)
        {
            //if(found) return true;
            if(found(board,word,i,j,0)) 
            return true;
        }
    } 
    return false;
    }
private:
bool found(vector<vector<char>>& board, string& word, int row, int col, int index)
{
  if(index==word.size())  return true;
  //if(row<0 ||row>board.size()||col<0||col>board[0].size()||board[row][col]!=board[index])
  if(row<0 ||row>=board.size()||col<0||col>=board[0].size()||board[row][col]!=word[index])
  return false;
  char temp=board[row][col];
  board[row][col]='#';
  //found(board,word,row,col,index)
  bool res=found(board,word,row+1,col,index+1)||found(board,word,row-1,col,index+1)||found(board,word,row,col+1,index+1)||found(board,word,row,col-1,index+1);
  board[row][col]=temp;
  return res;
}
};
